@page "/cartpage"
@rendermode InteractiveServer
@inject BasketServiceClient BasketClient
@inject CatalogServiceClient CatalogService

<PageTitle>Shopping Cart - AspireShop</PageTitle>

<!-- Header -->
<header class="bg-primary text-white py-4 mb-4">
	<div class="container">
		<div class="row align-items-center">
			<div class="col-md-6">
				<h1 class="h3 mb-0">
					<i class="fa fa-shopping-cart me-2"></i>
					Shopping Cart
				</h1>
			</div>
			<div class="col-md-6 text-end">
				<a href="/" class="btn btn-outline-light">
					<i class="fa fa-arrow-left me-1"></i>
					Continue Shopping
				</a>
			</div>
		</div>
	</div>
</header>

<div class="container">
	@if (cartItems?.Any() == true)
	{
		<div class="row justify-content-center">
			<div class="col-lg-10">
				<div class="card shadow-sm">
					<div class="card-header bg-light d-flex justify-content-between align-items-center">
						<h5 class="mb-0">Cart Items (@(customerBasket?.TotalItemCount ?? 0) items)</h5>
						<button type="button" class="btn btn-outline-danger btn-sm" @onclick="ClearCart" disabled="@isClearing">
							@if (isClearing)
							{
								<div class="spinner-border spinner-border-sm me-1" role="status"></div>
								<span>Clearing...</span>
							}
							else
							{
								<i class="fa fa-trash me-1"></i>
								<span>Clear Cart</span>
							}
						</button>
					</div>
					<div class="card-body p-0">
						<div class="table-responsive">
							<table class="table table-hover mb-0">
								<thead class="table-light">
									<tr>
										<th>Product</th>
										<th>Price</th>
										<th>Quantity</th>
										<th>Total</th>
									</tr>
								</thead>
								<tbody>
									@foreach (var item in cartItems)
									{
										<tr>
											<td>
												<div class="d-flex align-items-center">
													<img src="catalog/images/@item.ProductId"
															 alt="@item.ProductName"
															 class="me-3 rounded"
															 style="width: 80px; height: 80px; object-fit: cover;"
															 onerror="this.src='data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 width=%2780%27 height=%2780%27%3E%3Crect width=%27100%25%27 height=%27100%25%27 fill=%27%23f8f9fa%27/%3E%3Ctext x=%2750%25%27 y=%2750%25%27 dominant-baseline=%27middle%27 text-anchor=%27middle%27 fill=%27%23666%27%3ENo Image%3C/text%3E%3C/svg%3E'">
													<div>
														<h6 class="mb-1">@item.ProductName</h6>
														<p class="text-muted mb-0 small">@item.ProductDescription</p>
														<small class="text-muted">Brand: @item.ProductBrand</small>
													</div>
												</div>
											</td>
											<td class="align-middle">
												<span class="fw-bold">@item.UnitPrice.ToString("C")</span>
											</td>
											<td class="align-middle">
												<span class="fw-bold text-primary">@item.Quantity</span>
											</td>
											<td class="align-middle">
												<span class="fw-bold text-success">@((item.UnitPrice * item.Quantity).ToString("C"))</span>
											</td>
										</tr>
									}
								</tbody>
								<tfoot class="table-light">
									<tr>
										<td colspan="3" class="text-end fw-bold">Total:</td>
										<td class="fw-bold text-success h5">@GetCartTotal().ToString("C")</td>
									</tr>
								</tfoot>
							</table>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
	else
	{
		<div class="text-center py-5">
			<div class="card shadow-sm mx-auto" style="max-width: 400px;">
				<div class="card-body py-5">
					<i class="fa fa-shopping-cart fa-4x text-muted mb-4"></i>
					<h4 class="text-muted mb-3">Your cart is empty</h4>
					<p class="text-muted mb-4">Looks like you haven't added any items to your cart yet.</p>
					<a href="/" class="btn btn-primary">
						<i class="fa fa-shopping-bag me-2"></i>
						Start Shopping
					</a>
				</div>
			</div>
		</div>
	}

	@if (!string.IsNullOrEmpty(statusMessage))
	{
		<div class="alert alert-info mt-3" role="alert">
			@statusMessage
		</div>
	}
</div>

@code {
	private CustomerBasket? customerBasket;
	private List<CartItemViewModel>? cartItems;
	private bool isClearing = false;
	private string statusMessage = "";

	protected override async Task OnInitializedAsync()
	{
		await LoadCartData();
	}

	private async Task LoadCartData()
	{
		try
		{
			statusMessage = "Loading cart data...";
			StateHasChanged();

			(customerBasket, var isAvailable) = await BasketClient.GetBasketAsync("user");

			if (!isAvailable)
			{
				statusMessage = "Cart service is not available";
				cartItems = new List<CartItemViewModel>();
				return;
			}

			if (customerBasket?.Items?.Any() == true)
			{
				cartItems = new List<CartItemViewModel>();

				// Get ALL catalog items using the new method
				var allProducts = await CatalogService.GetAllItemsAsync();


				foreach (var basketItem in customerBasket.Items)
				{
					var product = allProducts.FirstOrDefault(p => p.Id == basketItem.ProductId);

					if (product != null)
					{
						cartItems.Add(new CartItemViewModel
						{
							ProductId = basketItem.ProductId,
							ProductName = product.Name,
							ProductDescription = product.Description,
							ProductBrand = product.CatalogBrand,
							UnitPrice = product.Price,
							Quantity = basketItem.Quantity
						});
					}
					else
					{
						// Fallback - use the price from the basket item
						cartItems.Add(new CartItemViewModel
						{
							ProductId = basketItem.ProductId,
							ProductName = $"Product {basketItem.ProductId}",
							ProductDescription = "Product details not found in catalog",
							ProductBrand = "Unknown",
							UnitPrice = basketItem.UnitPrice, // Use price from basket
							Quantity = basketItem.Quantity
						});

					}
				}

				statusMessage = $"Loaded {cartItems.Count} items from cart";
			}
			else
			{
				cartItems = new List<CartItemViewModel>();
				statusMessage = "Cart is empty";
			}
		}
		catch (Exception ex)
		{
			statusMessage = $"Error loading cart: {ex.Message}";
			cartItems = new List<CartItemViewModel>();
		}
		finally
		{
			statusMessage = ""; // Clear the loading message
			StateHasChanged();
		}
	}

	private async Task ClearCart()
	{
		if (isClearing)
			return; // Prevent double clicks

		isClearing = true;
		statusMessage = "Clearing cart...";
		StateHasChanged();

		try
		{

			// Try to get the basket first to make sure it exists
			var (currentBasket, isAvailable) = await BasketClient.GetBasketAsync("user");

			if (!isAvailable)
			{
				statusMessage = "Cart service is not available";
				return;
			}

			if (currentBasket?.Items?.Any() == true)
			{

				await BasketClient.DeleteBasketAsync("user");


				// Wait a moment for the operation to complete
				await Task.Delay(500);

				// Verify the basket is actually cleared
				var (verifyBasket, _) = await BasketClient.GetBasketAsync("user");
				if (verifyBasket?.Items?.Any() != true)
				{
					statusMessage = "Cart cleared successfully";
				}
				else
				{
					statusMessage = "Cart may not have been cleared completely";
				}
			}
			else
			{
				statusMessage = "Cart was already empty";
			}

			await LoadCartData();
		}
		catch (Exception ex)
		{
			statusMessage = $"Error clearing cart: {ex.Message}";
		}
		finally
		{
			isClearing = false;
			StateHasChanged();
		}
	}

	private decimal GetCartTotal()
	{
		return cartItems?.Sum(item => item.UnitPrice * item.Quantity) ?? 0;
	}

	public class CartItemViewModel
	{
		public int ProductId { get; set; }
		public string ProductName { get; set; } = "";
		public string ProductDescription { get; set; } = "";
		public string ProductBrand { get; set; } = "";
		public decimal UnitPrice { get; set; }
		public int Quantity { get; set; }
	}
}