@page "/"
@rendermode InteractiveServer

@inject CatalogServiceClient CatalogService
@inject NavigationManager NavigationManager

<PageTitle>Aspire Shop - Modern Product Catalog</PageTitle>

<!-- Modern Header -->
<header class="bg-primary text-white py-4 mb-4">
	<div class="container">
		<div class="row align-items-center">
			<div class="col-md-4">
				<h1 class="h3 mb-0">
					<i class="fa fa-shopping-bag me-2"></i>
					AspireShop
				</h1>
			</div>
			<div class="col-md-4 text-center">
				<h2 class="h4 mb-0">Product Catalog</h2>
			</div>
			<div class="col-md-4 text-end">
				<button type="button" class="btn btn-outline-light" @onclick="GoToCartPage">
					<i class="fa fa-shopping-cart"></i>
					<span class="d-none d-md-inline ms-2">Cart</span>
				</button>
			</div>
		</div>
	</div>
</header>

<div class="container">
	@if (catalog is { Data: var data } && data.Any())
	{
		<!-- Product Grid -->
		<div class="row g-4 mb-5">
			@foreach (var item in data)
			{
				<div class="col-sm-6 col-md-4 col-lg-3">
					<div class="card h-100 shadow-sm product-card">
						<div class="position-relative">
							<img src="catalog/images/@item.Id"
									 alt="@item.Name"
									 class="card-img-top product-image"
									 style="height: 250px; object-fit: cover;"
									 onerror="this.src='data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 width=%27250%27 height=%27250%27%3E%3Crect width=%27100%25%27 height=%27100%25%27 fill=%27%23f8f9fa%27/%3E%3Ctext x=%2750%25%27 y=%2750%25%27 dominant-baseline=%27middle%27 text-anchor=%27middle%27 fill=%27%23666%27%3ENo Image%3C/text%3E%3C/svg%3E'">
							<div class="product-overlay">
								<i class="fa fa-search-plus text-white"></i>
							</div>
						</div>

						<div class="card-body d-flex flex-column">
							<h5 class="card-title text-truncate" title="@item.Name">@item.Name</h5>
							<p class="card-text text-muted small flex-grow-1">@item.Description</p>

							<div class="mt-auto">
								<div class="d-flex justify-content-between align-items-center mb-2">
									<span class="h5 text-success mb-0">@item.Price.ToString("C")</span>
									<small class="text-muted">@item.CatalogBrand</small>
								</div>

								<AddToCart Item="item" />
							</div>
						</div>
					</div>
				</div>
			}
		</div>

		<!-- Modern Pagination -->
		<nav aria-label="Product pagination" class="d-flex justify-content-center">
			<div class="btn-group" role="group">
				@if (paginationInfo.HasPreviousPage)
				{
					<a class="btn btn-outline-primary" href="?before=@paginationInfo.FirstId">
						<i class="fa fa-arrow-left me-1"></i>
						Previous
					</a>
				}
				else
				{
					<span class="btn btn-outline-secondary disabled">
						<i class="fa fa-arrow-left me-1"></i>
						Previous
					</span>
				}

				@if (paginationInfo.HasNextPage)
				{
					<a class="btn btn-outline-primary" href="?after=@paginationInfo.NextId">
						Next
						<i class="fa fa-arrow-right ms-1"></i>
					</a>
				}
				else
				{
					<span class="btn btn-outline-secondary disabled">
						Next
						<i class="fa fa-arrow-right ms-1"></i>
					</span>
				}
			</div>
		</nav>
	}
	else if (catalog != null)
	{
		<!-- No Products Found -->
		<div class="text-center py-5">
			<div class="card shadow-sm mx-auto" style="max-width: 400px;">
				<div class="card-body py-5">
					<i class="fa fa-search fa-3x text-muted mb-3"></i>
					<h4 class="text-muted mb-3">No products found</h4>
					<p class="text-muted">Try browsing different categories or check back later.</p>
					<a href="/" class="btn btn-primary">
						<i class="fa fa-refresh me-1"></i>
						Refresh
					</a>
				</div>
			</div>
		</div>
	}
	else
	{
		<!-- Loading State -->
		<div class="text-center py-5">
			<div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
				<span class="visually-hidden">Loading...</span>
			</div>
			<h5 class="text-muted">Loading product catalog...</h5>
			<p class="text-muted">Please wait while we fetch the latest products for you.</p>
		</div>
	}
</div>

@code {
	CatalogItemsPage? catalog;
	PaginationInfo paginationInfo = new(FirstId: 0, NextId: 0, HasPreviousPage: false, HasNextPage: false);

	[SupplyParameterFromQuery]
	public int? Before { get; set; }

	[SupplyParameterFromQuery]
	public int? After { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			catalog = await CatalogService.GetItemsAsync(Before, After);

			if (catalog is not null)
			{
				paginationInfo = new PaginationInfo(
						FirstId: catalog.FirstId,
						NextId: catalog.NextId,
						HasPreviousPage: Before.HasValue || After.HasValue,
						HasNextPage: !catalog.IsLastPage
				);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading catalog: {ex.Message}");
			catalog = null;
		}
	}

	private void GoToCartPage()
	{
		NavigationManager.NavigateTo("/cartpage");
	}

	record PaginationInfo(int FirstId, int NextId, bool HasPreviousPage, bool HasNextPage);
}
